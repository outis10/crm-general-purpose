package com.outis.crmgp.domain;

import static com.outis.crmgp.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class QuotationAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertQuotationAllPropertiesEquals(Quotation expected, Quotation actual) {
        assertQuotationAutoGeneratedPropertiesEquals(expected, actual);
        assertQuotationAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertQuotationAllUpdatablePropertiesEquals(Quotation expected, Quotation actual) {
        assertQuotationUpdatableFieldsEquals(expected, actual);
        assertQuotationUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertQuotationAutoGeneratedPropertiesEquals(Quotation expected, Quotation actual) {
        assertThat(expected)
            .as("Verify Quotation auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertQuotationUpdatableFieldsEquals(Quotation expected, Quotation actual) {
        assertThat(expected)
            .as("Verify Quotation relevant properties")
            .satisfies(e -> assertThat(e.getCreatedAt()).as("check createdAt").isEqualTo(actual.getCreatedAt()))
            .satisfies(e -> assertThat(e.getQuantity()).as("check quantity").isEqualTo(actual.getQuantity()))
            .satisfies(
                e ->
                    assertThat(e.getUnitPrice()).as("check unitPrice").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getUnitPrice())
            )
            .satisfies(
                e ->
                    assertThat(e.getTotalPrice())
                        .as("check totalPrice")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getTotalPrice())
            )
            .satisfies(e -> assertThat(e.getStatus()).as("check status").isEqualTo(actual.getStatus()))
            .satisfies(e -> assertThat(e.getExpiredAt()).as("check expiredAt").isEqualTo(actual.getExpiredAt()))
            .satisfies(e -> assertThat(e.getComments()).as("check comments").isEqualTo(actual.getComments()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertQuotationUpdatableRelationshipsEquals(Quotation expected, Quotation actual) {
        assertThat(expected)
            .as("Verify Quotation relationships")
            .satisfies(e -> assertThat(e.getOpportunity()).as("check opportunity").isEqualTo(actual.getOpportunity()))
            .satisfies(e -> assertThat(e.getProduct()).as("check product").isEqualTo(actual.getProduct()));
    }
}
